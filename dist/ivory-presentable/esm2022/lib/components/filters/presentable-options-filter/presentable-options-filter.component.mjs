import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/filter-manager.service";
import * as i2 from "@angular/forms";
export class PresentableOptionsFilterComponent {
    set taxonomy(value) {
        this._taxonomy = this.filterManager.processFilterOptions(value);
    }
    get taxonomy() {
        return this._taxonomy;
    }
    emitApplied(value) {
        this.whenApplied.emit(value);
    }
    constructor(filterManager) {
        this.filterManager = filterManager;
        this._showPopover = false;
        this._taxonomy = [];
        this.whenApplied = new EventEmitter();
    }
    toggleFilterPopover() {
        this._showPopover = !this._showPopover;
    }
    applyFilter() {
        this.toggleFilterPopover();
        let appliedObjects = [];
        for (const item of this._taxonomy) {
            if (item['isSelected'] === true) {
                appliedObjects.push(item['option']);
            }
        }
        this.emitApplied({ 'column': this.column['field'], 'type': this.column['filterType'], 'values': appliedObjects });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: PresentableOptionsFilterComponent, deps: [{ token: i1.FilterManagerService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.1", type: PresentableOptionsFilterComponent, selector: "presentable-options-filter", inputs: { column: "column", taxonomy: "taxonomy" }, outputs: { whenApplied: "whenApplied" }, ngImport: i0, template: "<button \n  class=\"ivpt-filter-trigger\"\n  [id]=\"'filter_handle_'+column.field\"\n  (click)=\"toggleFilterPopover()\"\n>\n  Filter\n</button>\n@if (_showPopover) {\n  <div\n    class=\"ivpt-filter-popover\" \n    aria-label=\"filter options\" \n    role=\"presentation\"\n  >\n    <ul class=\"ivpt-filter-options\">\n      @for (optionItem of _taxonomy; track optionItem) {\n        <li class=\"ivpt-filter-option\">\n          <input \n            type=\"checkbox\" \n            [name]=\"optionItem.option\" \n            id=\"{{column.field}}_{{optionItem.option}}\"\n            [(ngModel)]=\"optionItem.isSelected\"\n          />\n          <label class=\"filter-option-label\" for=\"{{column.field}}_{{optionItem.option}}\">\n            {{optionItem.option}}\n          </label>\n        </li>\n      }\n    </ul>\n    <button class=\"ivpt-filter-apply\" (click)=\"applyFilter()\">Apply</button>\n  </div>\n}\n", styles: ["*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;box-sizing:border-box;color:#212529;font-size:14px}.ivpt-flex-cell{flex:1}.ivpt-select-cell{display:flex;width:36px;justify-content:center;align-items:center}.ivpt-button{border:none;border-radius:.25rem;background-color:#c8dbee;height:1.5rem;line-height:1.5rem;padding:0 .5rem;cursor:pointer}.ivpt-filter-popover{display:block;position:absolute;top:100%;background:#fff;border:1px solid #CDD4D9;z-index:999;padding:1rem;min-width:200px}.ivpt-filter-options{padding:0;margin:0 0 16px;max-height:200px;overflow:scroll}.ivpt-filter-option{list-style:none;line-height:1.5rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"], dependencies: [{ kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: PresentableOptionsFilterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'presentable-options-filter', template: "<button \n  class=\"ivpt-filter-trigger\"\n  [id]=\"'filter_handle_'+column.field\"\n  (click)=\"toggleFilterPopover()\"\n>\n  Filter\n</button>\n@if (_showPopover) {\n  <div\n    class=\"ivpt-filter-popover\" \n    aria-label=\"filter options\" \n    role=\"presentation\"\n  >\n    <ul class=\"ivpt-filter-options\">\n      @for (optionItem of _taxonomy; track optionItem) {\n        <li class=\"ivpt-filter-option\">\n          <input \n            type=\"checkbox\" \n            [name]=\"optionItem.option\" \n            id=\"{{column.field}}_{{optionItem.option}}\"\n            [(ngModel)]=\"optionItem.isSelected\"\n          />\n          <label class=\"filter-option-label\" for=\"{{column.field}}_{{optionItem.option}}\">\n            {{optionItem.option}}\n          </label>\n        </li>\n      }\n    </ul>\n    <button class=\"ivpt-filter-apply\" (click)=\"applyFilter()\">Apply</button>\n  </div>\n}\n", styles: ["*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;box-sizing:border-box;color:#212529;font-size:14px}.ivpt-flex-cell{flex:1}.ivpt-select-cell{display:flex;width:36px;justify-content:center;align-items:center}.ivpt-button{border:none;border-radius:.25rem;background-color:#c8dbee;height:1.5rem;line-height:1.5rem;padding:0 .5rem;cursor:pointer}.ivpt-filter-popover{display:block;position:absolute;top:100%;background:#fff;border:1px solid #CDD4D9;z-index:999;padding:1rem;min-width:200px}.ivpt-filter-options{padding:0;margin:0 0 16px;max-height:200px;overflow:scroll}.ivpt-filter-option{list-style:none;line-height:1.5rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"] }]
        }], ctorParameters: () => [{ type: i1.FilterManagerService }], propDecorators: { column: [{
                type: Input
            }], taxonomy: [{
                type: Input
            }], whenApplied: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VudGFibGUtb3B0aW9ucy1maWx0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXZvcnktcHJlc2VudGFibGUvc3JjL2xpYi9jb21wb25lbnRzL2ZpbHRlcnMvcHJlc2VudGFibGUtb3B0aW9ucy1maWx0ZXIvcHJlc2VudGFibGUtb3B0aW9ucy1maWx0ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXZvcnktcHJlc2VudGFibGUvc3JjL2xpYi9jb21wb25lbnRzL2ZpbHRlcnMvcHJlc2VudGFibGUtb3B0aW9ucy1maWx0ZXIvcHJlc2VudGFibGUtb3B0aW9ucy1maWx0ZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQVN2RSxNQUFNLE9BQU8saUNBQWlDO0lBUTVDLElBQ0ksUUFBUSxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUdELFdBQVcsQ0FBQyxLQUFVO1FBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxZQUNTLGFBQW1DO1FBQW5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQXBCNUMsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFFOUIsY0FBUyxHQUFRLEVBQUUsQ0FBQztRQVlWLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQU83QyxDQUFDO0lBR0osbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxjQUFjLEdBQVEsRUFBRSxDQUFDO1FBQzdCLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNqQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBRyxJQUFJLEVBQUU7Z0JBQzdCLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDckM7U0FDRjtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFDLENBQUMsQ0FBQztJQUNsSCxDQUFDOzhHQXZDVSxpQ0FBaUM7a0dBQWpDLGlDQUFpQywrSkNUOUMsMDVCQStCQTs7MkZEdEJhLGlDQUFpQztrQkFMN0MsU0FBUzsrQkFDRSw0QkFBNEI7eUZBVTdCLE1BQU07c0JBQWQsS0FBSztnQkFHRixRQUFRO3NCQURYLEtBQUs7Z0JBUUksV0FBVztzQkFBcEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEZpbHRlck1hbmFnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvZmlsdGVyLW1hbmFnZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ByZXNlbnRhYmxlLW9wdGlvbnMtZmlsdGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3ByZXNlbnRhYmxlLW9wdGlvbnMtZmlsdGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmw6ICcuL3ByZXNlbnRhYmxlLW9wdGlvbnMtZmlsdGVyLmNvbXBvbmVudC5zY3NzJ1xufSlcbmV4cG9ydCBjbGFzcyBQcmVzZW50YWJsZU9wdGlvbnNGaWx0ZXJDb21wb25lbnQge1xuXG4gIF9zaG93UG9wb3ZlcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIF90YXhvbm9teTogYW55ID0gW107XG5cbiAgQElucHV0KCkgY29sdW1uOiBhbnk7XG5cbiAgQElucHV0KCkgXG4gIHNldCB0YXhvbm9teSh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5fdGF4b25vbXkgPSB0aGlzLmZpbHRlck1hbmFnZXIucHJvY2Vzc0ZpbHRlck9wdGlvbnModmFsdWUpO1xuICB9XG4gIGdldCB0YXhvbm9teSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGF4b25vbXk7XG4gIH1cblxuICBAT3V0cHV0KCkgd2hlbkFwcGxpZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgZW1pdEFwcGxpZWQodmFsdWU6IGFueSkge1xuICAgIHRoaXMud2hlbkFwcGxpZWQuZW1pdCh2YWx1ZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZmlsdGVyTWFuYWdlcjogRmlsdGVyTWFuYWdlclNlcnZpY2VcbiAgKSB7fVxuICBcblxuICB0b2dnbGVGaWx0ZXJQb3BvdmVyKCkge1xuICAgIHRoaXMuX3Nob3dQb3BvdmVyPSF0aGlzLl9zaG93UG9wb3ZlcjtcbiAgfVxuXG4gIGFwcGx5RmlsdGVyKCkge1xuICAgIHRoaXMudG9nZ2xlRmlsdGVyUG9wb3ZlcigpO1xuICAgIGxldCBhcHBsaWVkT2JqZWN0czogYW55ID0gW107XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuX3RheG9ub215KSB7XG4gICAgICBpZiAoaXRlbVsnaXNTZWxlY3RlZCddPT09dHJ1ZSkge1xuICAgICAgICBhcHBsaWVkT2JqZWN0cy5wdXNoKGl0ZW1bJ29wdGlvbiddKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5lbWl0QXBwbGllZCh7J2NvbHVtbic6IHRoaXMuY29sdW1uWydmaWVsZCddLCAndHlwZSc6IHRoaXMuY29sdW1uWydmaWx0ZXJUeXBlJ10sICd2YWx1ZXMnOiBhcHBsaWVkT2JqZWN0c30pO1xuICB9XG5cbn1cbiIsIjxidXR0b24gXG4gIGNsYXNzPVwiaXZwdC1maWx0ZXItdHJpZ2dlclwiXG4gIFtpZF09XCInZmlsdGVyX2hhbmRsZV8nK2NvbHVtbi5maWVsZFwiXG4gIChjbGljayk9XCJ0b2dnbGVGaWx0ZXJQb3BvdmVyKClcIlxuPlxuICBGaWx0ZXJcbjwvYnV0dG9uPlxuQGlmIChfc2hvd1BvcG92ZXIpIHtcbiAgPGRpdlxuICAgIGNsYXNzPVwiaXZwdC1maWx0ZXItcG9wb3ZlclwiIFxuICAgIGFyaWEtbGFiZWw9XCJmaWx0ZXIgb3B0aW9uc1wiIFxuICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxuICA+XG4gICAgPHVsIGNsYXNzPVwiaXZwdC1maWx0ZXItb3B0aW9uc1wiPlxuICAgICAgQGZvciAob3B0aW9uSXRlbSBvZiBfdGF4b25vbXk7IHRyYWNrIG9wdGlvbkl0ZW0pIHtcbiAgICAgICAgPGxpIGNsYXNzPVwiaXZwdC1maWx0ZXItb3B0aW9uXCI+XG4gICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCIgXG4gICAgICAgICAgICBbbmFtZV09XCJvcHRpb25JdGVtLm9wdGlvblwiIFxuICAgICAgICAgICAgaWQ9XCJ7e2NvbHVtbi5maWVsZH19X3t7b3B0aW9uSXRlbS5vcHRpb259fVwiXG4gICAgICAgICAgICBbKG5nTW9kZWwpXT1cIm9wdGlvbkl0ZW0uaXNTZWxlY3RlZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmaWx0ZXItb3B0aW9uLWxhYmVsXCIgZm9yPVwie3tjb2x1bW4uZmllbGR9fV97e29wdGlvbkl0ZW0ub3B0aW9ufX1cIj5cbiAgICAgICAgICAgIHt7b3B0aW9uSXRlbS5vcHRpb259fVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvbGk+XG4gICAgICB9XG4gICAgPC91bD5cbiAgICA8YnV0dG9uIGNsYXNzPVwiaXZwdC1maWx0ZXItYXBwbHlcIiAoY2xpY2spPVwiYXBwbHlGaWx0ZXIoKVwiPkFwcGx5PC9idXR0b24+XG4gIDwvZGl2PlxufVxuIl19